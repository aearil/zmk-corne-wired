/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"


/* layer and key shortcuts */

#define XXX &none
#define ___ &trans

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NAV 1
#define NUM 2

/* custom behaviors */

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)

// tap: sticky shift | double tap: capsword
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

// tap: backspace | shift + tap: delete | hold: num layer
// ZMK_BEHAVIOR(bs_del_num, mod_morph,
//     bindings = <&lt NUM BSPC>, <&kp DEL>;
//     mods = <(MOD_LSFT|MOD_RSFT)>;
// )

/* keymap */

ZMK_LAYER(def,
          &kp Q              &kp W          &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P
          &hrm LGUI A   &hrm LALT S   &hrm LCTRL D  &hrm LSHFT F  &kp G             &kp H         &hrm RSHFT I  &hrm RCTRL J  &hrm RALT K   &hrm RGUI L
          &kp Z               &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH
                                      &kp ESC       &lt NAV SPACE &kp TAB           &kp RET       &lt NUM RC(BSPC)   &ss_cw
)

ZMK_LAYER(nav,
          XXX               &kp LC(C)       &kp LC(V)       &kp LC(X)      XXX             XXX         XXX               XXX                   XXX             XXX         
          &kp LGUI      &kp LALT         &kp LCTRL     &kp LSHFT     XXX             XXX         &kp LEFT      &kp DOWN       &kp UP       &kp RIGHT
          XXX               XXX                 XXX                 XXX                XXX             XXX         XXX               XXX                   XXX             XXX
                                                        XXX                 XXX                 XXX            XXX          BSPC             XXX
)

ZMK_LAYER(num,
          XXX           &kp N7         &kp N8       &kp N9         &kp PLUS               XXX         XXX               XXX                   XXX             XXX         
          &kp N0      &kp N4        &kp N5       &kp N6         &kp MINUS             XXX         &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI 
          XXX           &kp N1         &kp N2       &kp N3         &kp STAR                XXX         XXX               XXX                   XXX             XXX
                                                 &kp DOT     &kp FSLH     &kp EQUAL            XXX          BSPC             XXX
)

// / {
//     behaviors {
//         hm: homerow_mods {
//             compatible = "zmk,behavior-hold-tap";
//             #binding-cells = <2>;
//             tapping-term-ms = <150>;
//             quick-tap-ms = <0>;
//             flavor = "tap-preferred";
//             bindings = <&kp>, <&kp>;
//         };

//         tht: thumb_hold_tap {
//             compatible = "zmk,behavior-hold-tap";
//             #binding-cells = <2>;
//             tapping-term-ms = <150>;
//             quick-tap-ms = <0>;
//             flavor = "tap-preferred";
//             bindings = <&mo>, <&kp>;
//         };
//     };

//     keymap {
//         compatible = "zmk,keymap";

//         default_layer {
//             // -----------------------------------------------------------------------------------------
//             //  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
//             //  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
//             //  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             //              | GUI | LWR | SPC |   | ENT | RSE  | ALT |

//             bindings = <
// &none  &kp Q       &kp W       &kp E        &kp R         &kp T           &kp Y                 &kp U         &kp I        &kp O       &kp P          &none
// &none  &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHIFT F  &kp G           &kp H                 &hm RSHIFT J  &hm RCTRL K  &hm RALT L  &hm LGUI SEMI  &none
// &none  &kp Z       &kp X       &kp C        &kp V         &kp B           &kp N                 &kp M         &kp COMMA    &kp DOT     &kp FSLH       &none
//                                &kp ESC      &kp TAB       &tht 2 SPACE    &tht 1 RC(BACKSPACE)  &kp ENTER     &kp DELETE
//             >;
//         };

//         num_layer {
//             // -----------------------------------------------------------------------------------------
//             // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
//             // | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
//             // |     |     |     |     |     |   |     |     |     |     |     |      |
//             //                    | GUI |     | SPC |   | ENT |     | ALT |

//             bindings = <
// &none  &none   &kp N7  &kp N8      &kp N9         &kp KP_PLUS        &none  &none       &none      &none     &none     &none
// &none  &kp N0  &kp N4  &kp N5      &kp N6         &kp KP_SUBTRACT    &none  &kp RSHIFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
// &none  &none   &kp N1  &kp N2      &kp N3         &kp KP_MULTIPLY    &none  &none       &none      &none     &none     &none
//                        &kp KP_DOT  &kp KP_DIVIDE  &kp KP_EQUAL       &none  &none       &none
//             >;
//         };

//         arrow_layer {
//             // -----------------------------------------------------------------------------------------
//             // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
//             // | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
//             // |     |     |     |     |     |   |     |     |     |     |     |      |
//             //                    | GUI |     | SPC |   | ENT |     | ALT |

//             bindings = <
// &none  &none       &none      &none     &none     &none        &none          &kp K_COPY       &kp K_PASTE  &kp K_CUT  &none        &none
// &none  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI  &none        &none          &kp LEFT         &kp DOWN     &kp UP     &kp RIGHT    &none
// &none  &none       &none      &none     &none     &none        &none          &kp RC(RS(TAB))  &kp HOME     &kp END    &kp RC(TAB)  &none
//                               &none     &none     &kp SPACE    &kp BACKSPACE  &trans           &trans
//             >;
//         };
//     };
// };
